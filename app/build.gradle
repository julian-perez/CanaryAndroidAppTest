import org.ajoberstar.grgit.Grgit
import com.android.build.OutputFile

apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply plugin: 'jacoco-android'
apply plugin: "com.google.protobuf"


repositories {
    mavenCentral()
    maven { url "https://repository-achartengine.forge.cloudbees.com/snapshot/" }
    maven { url "http://maven.snplow.com/releases" }
    maven {
        url "http://dl.bintray.com/urbanairship/android"
    }
    maven { url 'https://zendesk.artifactoryonline.com/zendesk/repo' }
    maven { url 'https://maven.fabric.io/public' }
    maven { url 'https://jitpack.io' }


}

buildscript {
    repositories {
        mavenCentral()
        google()
        jcenter()
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.2'
        classpath 'com.savillians.gradle:android-publisher:0.5'
        classpath 'com.android.tools.build:gradle:3.0.1'
        classpath 'io.fabric.tools:gradle:1.+'
        classpath 'org.ajoberstar:grgit:1.5.0'
    }
}

configurations.all {
    resolutionStrategy.force 'com.android.support:support-annotations:23.1.0'
}

android {
/*
    if you need a build with a custom version, just add it here, but don't commit to repo,
    unless you'd like to disable versionCode to be the number of commits in the current branch.

    ex. project.ext.set("versionCodeManualOverride", 123)
*/
    project.ext.set("versionCodeManualOverride", null)

    compileSdkVersion 27
    buildToolsVersion '26.0.2'
    useLibrary 'org.apache.http.legacy'
    dexOptions {
        javaMaxHeapSize "2048M"
    }

    dataBinding {
        enabled = true
    }

    defaultConfig {
        vectorDrawables.useSupportLibrary = true
        minSdkVersion 19
        targetSdkVersion 26
        versionCode getCustomVersionCode()
        multiDexEnabled true
        versionName '2.13.0'
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        //  Android Studio doesn't pass evniroment variables into Gradle so we can check if they are
        //  present and use them only if they are.
        if (System.getenv("ANDROID_KEYSTORE") != null) {
            stage {
                storeFile file(System.getenv("ANDROID_KEYSTORE"))
                storePassword System.getenv("ANDROID_KEYPASS")
                keyAlias System.getenv("ANDROID_KEYALIAS")
                keyPassword System.getenv("ANDROID_KEYPASS")
            }
        } else {
            stage {}
        }

    }

    splits {
        // Configures multiple APKs based on ABI.
        abi {
            // Enables building multiple APKs per ABI.
            enable true

            // Resets the list of ABIs that Gradle should create APKs for to none.
            reset()

            // Specifies a list of ABIs that Gradle should create APKs for.
            include "x86", "armeabi", "armeabi-v7a"

            // Specifies that we do not want to also generate a universal APK that includes all ABIs.
            universalApk false
        }
    }

    project.ext.versionCodes = ['armeabi': 1, 'armeabi-v7a': 2, 'x86': 4]

    android.applicationVariants.all { variant ->
        variant.outputs.each { output ->
            output.versionCodeOverride =
                    android.defaultConfig.versionCode * 10 +
                            project.ext.versionCodes.get(output.getFilter(
                                    OutputFile.ABI), 0)
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            proguardFile 'proguard-rules.pro'
            debuggable true
            testCoverageEnabled = true
        }

        release {
            minifyEnabled true
            proguardFile 'proguard-rules.pro'
            useProguard true
            debuggable false
            shrinkResources true
        }

        signed {
            signingConfig signingConfigs.stage
            minifyEnabled true
            proguardFile 'proguard-rules.pro'
            debuggable false
        }
    }
    flavorDimensions 'version'

    productFlavors {
        prod_qa {
            applicationId 'is.yranac.canary.production'
            dimension 'version'
        }
        prod {
            applicationId 'is.yranac.canary'
            dimension 'version'
        }
        stage {
            applicationId 'is.yranac.canary.staging'
            dimension 'version'
        }
        dev {
            applicationId 'is.yranac.canary.dev_two'
            dimension 'version'
        }
        beta_plus {
            applicationId 'is.yranac.canary.beta_plus'
            dimension 'version'
        }
        demo {
            applicationId 'is.yranac.canary.demo'
            dimension 'version'
        }
        beta {
            applicationId 'is.yranac.canary.production_beta'
            dimension 'version'
        }
        feature {
            applicationId 'is.yranac.canary.serinus'
            dimension 'version'
        }
    }

    sourceSets.main {
        jniLibs.srcDir "src/main/libs" //set .so files location to libs
        jni.srcDirs = [] //disable automatic ndk-build call
        proto {
            srcDir 'src/main/protobuf'
            srcDir 'src/main/protocolbuffers'
            // In addition to the default '**/*.proto' (use with caution).
            // Using an extension other than 'proto' is NOT recommended,
            // because when proto files are published along with class files, we can
            // only tell the type of a file from its extension.
            include '**/*.protodevel'
        }
    }



    sourceSets {
        androidTest {
            java.srcDir file('src/androidTest/java')
        }
    }


    crashlytics {
        enableNdk true
        androidNdkOut 'src/main/obj'
        androidNdkLibsOut 'src/main/libs'
    }

    dependencies {
        compile fileTree(dir: 'libs', include: ['*.jar'])
        // the following is required to use Mockito and JUnit for the
        // instrumentation unit tests on the JVM
        androidTestCompile 'junit:junit:4.12'

        androidTestCompile 'com.android.support.test:runner:0.5'

        androidTestCompile 'org.mockito:mockito-core:1.10.19'
        androidTestCompile 'com.google.dexmaker:dexmaker:1.2'
        androidTestCompile 'com.google.dexmaker:dexmaker-mockito:1.2'

        androidTestCompile 'com.android.support:support-annotations:25.1.0'
        androidTestCompile 'com.android.support.test:runner:0.5'
        androidTestCompile 'com.android.support.test:rules:0.5'
        // Optional -- Hamcrest library
        androidTestCompile 'org.hamcrest:hamcrest-library:1.3'
        // Optional -- UI testing with Espresso
        androidTestCompile 'com.android.support.test.espresso:espresso-core:2.2.2'

        compile 'com.android.support:multidex:1.0.1'
        compile 'com.google.android.gms:play-services-analytics:11.8.0'
        compile 'com.google.android.gms:play-services-maps:11.8.0'
        compile 'com.google.android.gms:play-services-location:11.8.0'
        compile 'com.google.android.gms:play-services-gcm:11.8.0'
        compile 'com.google.android.gms:play-services-wearable:11.8.0'
        compile 'com.urbanairship.android:urbanairship-sdk:8.8.4'
        compile 'com.google.code.gson:gson:2.7'
        compile 'com.github.mtotschnig:StickyListHeaders:2.7.1'
        compile 'com.sothree.slidinguppanel:library:2.0.4'
        compile 'com.squareup.retrofit:retrofit:1.9.0'
        compile 'com.squareup.okhttp:okhttp:2.2.0'
        compile 'com.squareup.okhttp:okhttp-urlconnection:2.2.0'
        compile 'com.squareup.okhttp3:okhttp:3.4.1'
        compile 'com.android.support:appcompat-v7:26.1.0'
        compile 'com.android.support:cardview-v7:26.1.0'
        compile 'com.android.support:support-v4:26.1.0'
        compile 'com.android.support:percent:26.1.0'
        compile 'com.github.lecho:hellocharts-library:1.5.8@aar'
        compile 'com.zendesk:sdk:1.1.0.1'
        compile 'de.halfbit:tinybus:3.0.1'
        compile 'com.firebase:firebase-jobdispatcher:0.7.0'
        compile 'com.snowplowanalytics:snowplow-android-tracker:0.6.0@aar'
        compile 'info.hoang8f:android-segmented:1.0.6'
        compile 'com.google.android.exoplayer:exoplayer:r2.2.0'
        compile 'com.q42:qlassified:0.1.1'
        compile 'com.hudomju:swipe-to-dismiss-undo:1.0'
        compile 'jp.wasabeef:blurry:2.0.2'
        // Crashlytics Kit
        compile('com.crashlytics.sdk.android:crashlytics:2.8.0@aar') {
            transitive = true;
        }

        protobuf files('libs/protos.jar')
        compile 'com.google.protobuf:protobuf-lite:3.0.0'
    }


    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
    }
    lintOptions {
        checkReleaseBuilds false
        abortOnError false

    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

}

def getCustomVersionCode() {

    if (project.versionCodeManualOverride != null) {
        return project.versionCodeManualOverride
    }

    // current dir is <your proj>/app, so it's likely that all your git repo files are in the dir
    // above.
    ext.repo = Grgit.open(project.file('..'))

    // should result in the same value as running
    // git rev-list <your current branch name> | wc -l
    def numOfCommits = ext.repo.log().size()
    return numOfCommits
}

protobuf {
    plugins {
        javalite {
            // The codegen for lite comes as a separate artifact
            artifact = 'com.google.protobuf:protoc-gen-javalite:3.0.0'
        }
    }

    generateProtoTasks {
        all().each { task ->
            task.plugins {
                javalite {}
            }
        }
        ofNonTest()
    }
}

jacocoAndroidUnitTestReport {
    csv.enabled true
    html.enabled true
    xml.enabled true
}
apply plugin: "com.google.gms.google-services"

protobuf.protoc {
    artifact = 'com.google.protobuf:protoc:3.0.0'
}
